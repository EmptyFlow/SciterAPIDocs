{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EmptyFlow.SciterAPI To check the sources, visit the github repository . What is Sciter? Sciter is embeddable HTML/CSS/JavaScript engine. Using Sciter you can create a cross-platform user interface by reusing knowledge of Web technologies. Check out official Sciter website for details. What is EmptyFlow.SciterAPI library? The EmptyFlow.SciterAPI library contains bindings for the Sciter dynamic library in C#. The library also contains low-level helpers for more convenience in working with Sciter. Getting started Creating project Load HTML and show window Using additional features Adding Event handlers Register file protocols Find element and get/set tag's text/html Create value","title":"Home"},{"location":"#emptyflowsciterapi","text":"To check the sources, visit the github repository .","title":"EmptyFlow.SciterAPI"},{"location":"#what-is-sciter","text":"Sciter is embeddable HTML/CSS/JavaScript engine. Using Sciter you can create a cross-platform user interface by reusing knowledge of Web technologies. Check out official Sciter website for details.","title":"What is Sciter?"},{"location":"#what-is-emptyflowsciterapi-library","text":"The EmptyFlow.SciterAPI library contains bindings for the Sciter dynamic library in C#. The library also contains low-level helpers for more convenience in working with Sciter.","title":"What is EmptyFlow.SciterAPI library?"},{"location":"#getting-started","text":"Creating project Load HTML and show window","title":"Getting started"},{"location":"#using-additional-features","text":"Adding Event handlers Register file protocols Find element and get/set tag's text/html Create value","title":"Using additional features"},{"location":"createvalue/","text":"Create Value You can create a standard value using CreateValue and several additional CreateXValue methods for special types. How to create standart value: var value = host.CreateValue ( 456565 ); Standart values can follow types: bool, int, long, decimal, double, float, string, IEnumerable , IDictionary How to create color value: var value = host.CreateColorValue ( 0 ); How to create duration value: var value = host.CreateDurationValue ( 30 ); How to create duration value: var value = host.CreateAngleValue ( 90 ); How to create secure string: var value = host.CreateSecureString ( \"my little secret:)\" ); How to create error string: var value = host.CreateError ( \"error!\" ); Common operations Clear value: host.ClearValue(value); Isolate value: host.IsolateValue(value); Get primitive types You can use one from methods for get original value: var intValue = host.GetValueInt32(value); // get int value var longValue = host.GetValueInt64(value); // get long value var doubleValue = host.GetValueDouble(value); // get double value var stringValue = host.GetValueString(value); // get string value Array value How to get count of elements in array: var countElementinArray = host.GetArrayOrMapCount(value); How to get element in array by index: var valueByIndex2 = host.GetArrayItem(ref value, 2); How to set element in array by index: var valueByIndex2 = host.SetArrayItem(ref value, 2, ref newValue); How to append new element in array at end of array: var valueByIndex2 = host.AppendItemToArray(ref value, ref newValue); Object (map in sciter docs) value How to get element in object by string key: var item = host.GetMapItem(ref map, \"item\"); How to set element in object by string key: host.SetMapItem(ref map, \"item\", ref newValue); How to get object: var itemsAsDictionary = host.GetMapItems(ref map); How to get element in object by index: var itemsAsDictionary = host.GetValueMapKey(ref map, index); How to execute value if it function? var parameters = new List<SciterValue> (); // need to fill if required pass parameters var resultValue = host.ValueInvoke(ref value, valueContext, parameters);","title":"Using Values"},{"location":"createvalue/#create-value","text":"You can create a standard value using CreateValue and several additional CreateXValue methods for special types. How to create standart value: var value = host.CreateValue ( 456565 ); Standart values can follow types: bool, int, long, decimal, double, float, string, IEnumerable , IDictionary How to create color value: var value = host.CreateColorValue ( 0 ); How to create duration value: var value = host.CreateDurationValue ( 30 ); How to create duration value: var value = host.CreateAngleValue ( 90 ); How to create secure string: var value = host.CreateSecureString ( \"my little secret:)\" ); How to create error string: var value = host.CreateError ( \"error!\" );","title":"Create Value"},{"location":"createvalue/#common-operations","text":"Clear value: host.ClearValue(value); Isolate value: host.IsolateValue(value);","title":"Common operations"},{"location":"createvalue/#get-primitive-types","text":"You can use one from methods for get original value: var intValue = host.GetValueInt32(value); // get int value var longValue = host.GetValueInt64(value); // get long value var doubleValue = host.GetValueDouble(value); // get double value var stringValue = host.GetValueString(value); // get string value","title":"Get primitive types"},{"location":"createvalue/#array-value","text":"How to get count of elements in array: var countElementinArray = host.GetArrayOrMapCount(value); How to get element in array by index: var valueByIndex2 = host.GetArrayItem(ref value, 2); How to set element in array by index: var valueByIndex2 = host.SetArrayItem(ref value, 2, ref newValue); How to append new element in array at end of array: var valueByIndex2 = host.AppendItemToArray(ref value, ref newValue);","title":"Array value"},{"location":"createvalue/#object-map-in-sciter-docs-value","text":"How to get element in object by string key: var item = host.GetMapItem(ref map, \"item\"); How to set element in object by string key: host.SetMapItem(ref map, \"item\", ref newValue); How to get object: var itemsAsDictionary = host.GetMapItems(ref map); How to get element in object by index: var itemsAsDictionary = host.GetValueMapKey(ref map, index);","title":"Object (map in sciter docs) value"},{"location":"createvalue/#how-to-execute-value-if-it-function","text":"var parameters = new List<SciterValue> (); // need to fill if required pass parameters var resultValue = host.ValueInvoke(ref value, valueContext, parameters);","title":"How to execute value if it function?"},{"location":"creatingproject/","text":"Prerequisites You need to download https://gitlab.com/sciter-engine/sciter-js-sdk/-/releases . You need install https://dotnet.microsoft.com/en-us/download . Prepare C# project Create C# project dotnet new create console --language=C# --name=TestProjectName Add Sciter Package dotnet add test.csproj package EmptyFlow.SciterAPI Write basic startup code using EmptyFlow.SciterAPI; SciterLoader.Initialize ( Environment.CurrentDirectory ); // you need specify folder where will be located sciter library file (sciter.dll/libsciter.so/libsciter.dylib) var host = new SciterAPIHost (); // create host host.LoadAPI (); // load sciter API and make adjustments for further work host.CreateMainWindow ( 300, 300, enableDebug: true, enableFeature: true ); // create main window and enable debug mode and sciter features (like access to system in JavaScript) host.LoadFile ( \"file://path/my.html\" ); // load HTML page, path specified in first argument host.Process (); // start sciter and run main loop for show main window","title":"Creating Project"},{"location":"creatingproject/#prerequisites","text":"You need to download https://gitlab.com/sciter-engine/sciter-js-sdk/-/releases . You need install https://dotnet.microsoft.com/en-us/download .","title":"Prerequisites"},{"location":"creatingproject/#prepare-c-project","text":"Create C# project dotnet new create console --language=C# --name=TestProjectName Add Sciter Package dotnet add test.csproj package EmptyFlow.SciterAPI","title":"Prepare C# project"},{"location":"creatingproject/#write-basic-startup-code","text":"using EmptyFlow.SciterAPI; SciterLoader.Initialize ( Environment.CurrentDirectory ); // you need specify folder where will be located sciter library file (sciter.dll/libsciter.so/libsciter.dylib) var host = new SciterAPIHost (); // create host host.LoadAPI (); // load sciter API and make adjustments for further work host.CreateMainWindow ( 300, 300, enableDebug: true, enableFeature: true ); // create main window and enable debug mode and sciter features (like access to system in JavaScript) host.LoadFile ( \"file://path/my.html\" ); // load HTML page, path specified in first argument host.Process (); // start sciter and run main loop for show main window","title":"Write basic startup code"},{"location":"eventhandlers/","text":"Event Handlers It has two types of handlers - window and element (or html tag). The difference between these types is that EventHandler with window type can receive all events from all elements on the page while EventHandler with element type only events from that element. Basic class for all EventHandler's is SciterEventHandler . Also for convinience there is have two classes for each type - WindowEventHandler and ElementEventHandler . What is EventHandler? EventHandler is class SciterEventHandler or one from it ancestors. Inside class you can define handler by override some of virtual methods. You can check below which methods can be overridden: AfterRegisterEvent Occurs immediately after EventHandler was registered. HandleInitializationEvent Occurs when EventHandler was attached/deattached to element/window. ScriptMethodCall Occurs when a JavaScript xcall(...) call on a element or window. BehaviourEvent SOMEvent MethodCall Occurs when some of standart element methods called. ExchangeParameters DataArrived DrawEvent In this event handler you can write custom logic for drawing. GestureEvent Occurs when some of gesture happened. SizeEvent Occurs after size of element changed. TimerEvent ScrollEvent Occurs after scrolling. FocusEvent KeyboardEvent Occurs after keyboard interactive on element. MouseEvent Occurs after mouse interactive on element. Attach EventHandler for window // create main window host.CreateMainWindow ( ... ); // after window is created we can attach EventHandler for main window host.AddWindowEventHandler ( new MyWindowEventHandler ( host.MainWindow, host ) ); // we inherit class from WindowEventHandler and override BehaviourEvent // and inside it we can as example handled event happened after document is fully loaded public class MyWindowEventHandler : WindowEventHandler { public MyWindowEventHandler ( nint window, SciterAPIHost host ) : base ( window, host ) { } public override void BehaviourEvent ( BehaviourEvents cmd, nint heTarget, nint he, nint reason, SciterValue data, string name ) { if ( cmd == BehaviourEvents.DOCUMENT_READY ) { // there can be your logic } } } Add EventHandler for element from CSS property First you need to add a factory to create you custom SciterEventHandler : host.Callbacks.AddAttachBehaviourFactory ( \"mybehaviour\", ( element ) => new MyCustomEventHandler ( element, host ) ); After it you can attach registered custom SciterEventHandler in CSS class or tag style: // in CSS .customClass { behavior: 'mybehaviour' } <div class=\"customClass\"> </div> <div style=\"behavior: 'mybehaviour'\"> </div> Add EventHandler for element via SciterAPI // create event handler var eventHandler = new SciterEventHandler(); // attach eventHandler with element host.AddEventHandler(eventHandler);","title":"Adding Event handlers"},{"location":"eventhandlers/#event-handlers","text":"It has two types of handlers - window and element (or html tag). The difference between these types is that EventHandler with window type can receive all events from all elements on the page while EventHandler with element type only events from that element. Basic class for all EventHandler's is SciterEventHandler . Also for convinience there is have two classes for each type - WindowEventHandler and ElementEventHandler .","title":"Event Handlers"},{"location":"eventhandlers/#what-is-eventhandler","text":"EventHandler is class SciterEventHandler or one from it ancestors. Inside class you can define handler by override some of virtual methods. You can check below which methods can be overridden:","title":"What is EventHandler?"},{"location":"eventhandlers/#afterregisterevent","text":"Occurs immediately after EventHandler was registered.","title":"AfterRegisterEvent"},{"location":"eventhandlers/#handleinitializationevent","text":"Occurs when EventHandler was attached/deattached to element/window.","title":"HandleInitializationEvent"},{"location":"eventhandlers/#scriptmethodcall","text":"Occurs when a JavaScript xcall(...) call on a element or window.","title":"ScriptMethodCall"},{"location":"eventhandlers/#behaviourevent","text":"","title":"BehaviourEvent"},{"location":"eventhandlers/#somevent","text":"","title":"SOMEvent"},{"location":"eventhandlers/#methodcall","text":"Occurs when some of standart element methods called.","title":"MethodCall"},{"location":"eventhandlers/#exchangeparameters","text":"","title":"ExchangeParameters"},{"location":"eventhandlers/#dataarrived","text":"","title":"DataArrived"},{"location":"eventhandlers/#drawevent","text":"In this event handler you can write custom logic for drawing.","title":"DrawEvent"},{"location":"eventhandlers/#gestureevent","text":"Occurs when some of gesture happened.","title":"GestureEvent"},{"location":"eventhandlers/#sizeevent","text":"Occurs after size of element changed.","title":"SizeEvent"},{"location":"eventhandlers/#timerevent","text":"","title":"TimerEvent"},{"location":"eventhandlers/#scrollevent","text":"Occurs after scrolling.","title":"ScrollEvent"},{"location":"eventhandlers/#focusevent","text":"","title":"FocusEvent"},{"location":"eventhandlers/#keyboardevent","text":"Occurs after keyboard interactive on element.","title":"KeyboardEvent"},{"location":"eventhandlers/#mouseevent","text":"Occurs after mouse interactive on element.","title":"MouseEvent"},{"location":"eventhandlers/#attach-eventhandler-for-window","text":"// create main window host.CreateMainWindow ( ... ); // after window is created we can attach EventHandler for main window host.AddWindowEventHandler ( new MyWindowEventHandler ( host.MainWindow, host ) ); // we inherit class from WindowEventHandler and override BehaviourEvent // and inside it we can as example handled event happened after document is fully loaded public class MyWindowEventHandler : WindowEventHandler { public MyWindowEventHandler ( nint window, SciterAPIHost host ) : base ( window, host ) { } public override void BehaviourEvent ( BehaviourEvents cmd, nint heTarget, nint he, nint reason, SciterValue data, string name ) { if ( cmd == BehaviourEvents.DOCUMENT_READY ) { // there can be your logic } } }","title":"Attach EventHandler for window"},{"location":"eventhandlers/#add-eventhandler-for-element-from-css-property","text":"First you need to add a factory to create you custom SciterEventHandler : host.Callbacks.AddAttachBehaviourFactory ( \"mybehaviour\", ( element ) => new MyCustomEventHandler ( element, host ) ); After it you can attach registered custom SciterEventHandler in CSS class or tag style: // in CSS .customClass { behavior: 'mybehaviour' } <div class=\"customClass\"> </div> <div style=\"behavior: 'mybehaviour'\"> </div>","title":"Add EventHandler for element from CSS property"},{"location":"eventhandlers/#add-eventhandler-for-element-via-sciterapi","text":"// create event handler var eventHandler = new SciterEventHandler(); // attach eventHandler with element host.AddEventHandler(eventHandler);","title":"Add EventHandler for element via SciterAPI"},{"location":"fileelement/","text":"Find element and get/set tag's text/html in progress","title":"Find element and change content"},{"location":"fileelement/#find-element-and-getset-tags-texthtml","text":"in progress","title":"Find element and get/set tag's text/html"},{"location":"fileprotocols/","text":"Register file protocols How to register new custom protocol host.Callbacks.AddProtocolHandler ( \"embedded://\", // custom protocol will be handled as embedded://my/resource/address/path ( path => { return Encoding.UTF8.GetBytes ( // just always return same content for all addresses \"\"\"\" <!DOCTYPE html> <html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <html> <body> <span id=\"world\">Hello world!!!</span> </body> </html> \"\"\"\" ); } )); Register existing protocol with partually handling host.Callbacks.AddProtocolHandler ( \"https://\", // default protocol but we need to handle only few addresses ( path => { if (path != \"index.html/mycustomresource\") return new byte[0]; // we handle only one address, others will be handled as usual return Encoding.UTF8.GetBytes ( // just always return same content for all addresses \"\"\"\" { \"res\": 100 } \"\"\"\" ); } ));","title":"Register file protocols"},{"location":"fileprotocols/#register-file-protocols","text":"","title":"Register file protocols"},{"location":"fileprotocols/#how-to-register-new-custom-protocol","text":"host.Callbacks.AddProtocolHandler ( \"embedded://\", // custom protocol will be handled as embedded://my/resource/address/path ( path => { return Encoding.UTF8.GetBytes ( // just always return same content for all addresses \"\"\"\" <!DOCTYPE html> <html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <html> <body> <span id=\"world\">Hello world!!!</span> </body> </html> \"\"\"\" ); } ));","title":"How to register new custom protocol"},{"location":"fileprotocols/#register-existing-protocol-with-partually-handling","text":"host.Callbacks.AddProtocolHandler ( \"https://\", // default protocol but we need to handle only few addresses ( path => { if (path != \"index.html/mycustomresource\") return new byte[0]; // we handle only one address, others will be handled as usual return Encoding.UTF8.GetBytes ( // just always return same content for all addresses \"\"\"\" { \"res\": 100 } \"\"\"\" ); } ));","title":"Register existing protocol with partually handling"},{"location":"loadingandrun/","text":"Load HTML page You can load HTML page by default from local file file://... or from internet http(s)://... . Also supported local (from application path) folder via home://... protocol. For loading HTML page you need to call method SciterApiHost.LoadFile(...) . host.LoadFile ( \"file://my/path/to/file/index.html\" ); You can also implement your own file source via the Custom File protocol. For more information check out page . Run Sciter loop Main Sciter loop start handle events and show main window. Loop will be happened until if last opened window will be closed by user or programmatically. Start loop look like this: var code = host.Process (); if (code != 0) { // error handling logic } You can close the main window while the loop is running as follows: host.CloseMainWindow(); After this, all other open windows will also be closed. To close any other non-main window, you can call another method: host.CloseWindow(windowHwnd); // windowHwnd is pointer on window","title":"Load HTML and show window"},{"location":"loadingandrun/#load-html-page","text":"You can load HTML page by default from local file file://... or from internet http(s)://... . Also supported local (from application path) folder via home://... protocol. For loading HTML page you need to call method SciterApiHost.LoadFile(...) . host.LoadFile ( \"file://my/path/to/file/index.html\" ); You can also implement your own file source via the Custom File protocol. For more information check out page .","title":"Load HTML page"},{"location":"loadingandrun/#run-sciter-loop","text":"Main Sciter loop start handle events and show main window. Loop will be happened until if last opened window will be closed by user or programmatically. Start loop look like this: var code = host.Process (); if (code != 0) { // error handling logic } You can close the main window while the loop is running as follows: host.CloseMainWindow(); After this, all other open windows will also be closed. To close any other non-main window, you can call another method: host.CloseWindow(windowHwnd); // windowHwnd is pointer on window","title":"Run Sciter loop"}]}